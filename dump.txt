int pMT::find_helper(string vote, int time, int hashSelect, bTREE::treeNode* subtree) {
	if (subtree != NULL) {
		if (vote == subtree->data && time == subtree->time) {
			return count;
		}
		else {
			if (subtree->left_child != NULL || subtree->right_child != NULL) {
				count = count + (find_helper(vote, time, hashSelect, subtree->left_child) || find_helper(vote, time, hashSelect, subtree->right_child));
			if (count == myMerkle.bTREE::numberOfNodes()-1) {
				return 0;
			}
				return count;
			}
		}
	}
}
