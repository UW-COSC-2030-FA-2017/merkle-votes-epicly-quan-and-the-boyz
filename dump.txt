int pMT::find_helper(string vote, int time, int hashSelect, bTREE::treeNode* subtree) {
	if (subtree != NULL) {
		if (vote == subtree->data && time == subtree->time) {
			return count;
		}
		else {
			if (subtree->left_child != NULL || subtree->right_child != NULL) {
				count = count + (find_helper(vote, time, hashSelect, subtree->left_child) || find_helper(vote, time, hashSelect, subtree->right_child));
				return count;
			}
			else {
				return count;
			}
		}
	}
}



string pMT::hash_je(string key)
/**
 * @brief A function that takes in a key and returns a hash of that key using some custom function
 * @param key, a string
 * @return a hash of the key
 */
	//Hash function from Lab09 on hashfunctions
{
	unsigned int hash = 1315423911;

	for (std::size_t i = 0; i < key.length(); i++)
	{
		hash ^= ((hash << 5) + key[i] + (hash >> 2));
	}

	return std::to_string(hash);
}



string pMT::hash_da(string key)
/**
 * @brief A function that takes in a key and returns a hash of that key using some custom function
 * @param key, a string
 * @return a hash of the key
 */
	//Hash function from Lab09 on hashfunctions
{
	unsigned int BitsInUnsignedInt = (unsigned int)(sizeof(unsigned int) * 8);
	unsigned int ThreeQuarters = (unsigned int)((BitsInUnsignedInt * 3) / 4);
	unsigned int OneEighth = (unsigned int)(BitsInUnsignedInt / 8);
	unsigned int HighBits = (unsigned int)(0xFFFFFFFF) << (BitsInUnsignedInt - OneEighth);
	unsigned int hash = 0;
	unsigned int test = 0;

	for (std::size_t i = 0; i < key.length(); i++)
	{
		hash = (hash << OneEighth) + key[i];
		if ((test = hash & HighBits) != 0)
		{
			hash = ((hash ^ (test >> ThreeQuarters)) & (~HighBits));
		}
	}

	std::to_string(hash);
}

string pMT::hash_ja(string key)
/**
 * @brief A function that takes in a key and returns a hash of that key using some custom function
 * @param key, a string
 * @return a hash of the key
 */
	//Hash function from Lab09 on hashfunctions
{
	unsigned int seed = 131; // 31 131 1313 13131 131313 etc..
	unsigned int hash = 0;

	for (std::size_t i = 0; i < key.length(); i++)
	{
		hash = (hash * seed) + key[i];
	}

	std::to_string(hash);
}
